name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write

jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        job:
          - arch: aarch64
            container: quay.io/pypa/manylinux_2_28_aarch64
          - arch: arm
            container: alpine
        args:
          [ null, '--privileged' ]
          
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Start container
      uses: ./
      with:
        container: ${{ matrix.job.container }}
        arch: ${{ matrix.job.arch }}
        podman_args: ${{ matrix.args }}
    - name: Inspect container
      shell: bash
      run: podman inspect $__RUNNING_CONTAINER
    - name: Print arch from within container
      shell: run_in_container.sh {0}
      run: |
        echo "Arch in container: $(uname -m)"
    - name: Print arch from within container with explicit shell
      shell: run_in_container.sh --shell sh {0}
      run: |
        echo "Arch in container: $(uname -m)"
    - name: Set output and env from outside container
      shell: bash
      id: set_outside
      continue-on-error: true
      run: |
        echo "value=I_AM_OUTSIDE" >> $GITHUB_OUTPUT
        echo "OUTSIDE_VAR=ENV_OUTSIDE" >> $GITHUB_ENV
    - name: Set output and env from inside container
      shell: run_in_container.sh {0}
      id: set_inside
      continue-on-error: true
      run: |
        echo "value=I_AM_INSIDE" >> $GITHUB_OUTPUT
        echo "INSIDE_VAR=ENV_INSIDE" >> $GITHUB_ENV
    - name: Check output and env from outside container
      shell: bash
      env:
        LOCAL_OUTSIDE_ENV: "LOCAL_OUTSIDE"
      continue-on-error: true
      run: |
        RVAL=0
        [[ "${OUTSIDE_VAR}" != "ENV_OUTSIDE" ]] && echo "Error: OUTSIDE_VAR check failed: $OUTSIDE_VAR" && RVAL=1
        [[ "${INSIDE_VAR}" != "ENV_INSIDE" ]] && echo "Error: INSIDE_VAR check failed: $INSIDE_VAR" && RVAL=1
        [[ "${LOCAL_OUTSIDE_ENV}" != "LOCAL_OUTSIDE" ]] && echo "Error: LOCAL_OUTSIDE_ENV check failed: $LOCAL_OUTSIDE_ENV" && RVAL=1
        [[ "${{ steps.set_outside.outputs.value }}" != "I_AM_OUTSIDE" ]] && echo "Error: outside output check failed: ${{ steps.set_outside.outputs.value }}" && RVAL=1
        [[ "${{ steps.set_inside.outputs.value }}" != "I_AM_INSIDE" ]] && echo "Error: inside output check failed: ${{ steps.set_inside.outputs.value }}" && RVAL=1
        exit $RVAL
    - name: Check output and env from inside container
      shell: bash
      env:
        LOCAL_INSIDE_ENV: "LOCAL_INSIDE"
      continue-on-error: true
      run: |
        RVAL=0
        [[ "${OUTSIDE_VAR}" != "ENV_OUTSIDE" ]] && echo "Error: OUTSIDE_VAR check failed: $OUTSIDE_VAR" && RVAL=1
        [[ "${INSIDE_VAR}" != "ENV_INSIDE" ]] && echo "Error: INSIDE_VAR check failed: $INSIDE_VAR" && RVAL=1
        [[ "${LOCAL_INSIDE_ENV}" != "LOCAL_INSIDE" ]] && echo "Error: LOCAL_INSIDE_ENV check failed: $LOCAL_INSIDE_ENV" && RVAL=1
        [[ "${{ steps.set_outside.outputs.value }}" != "I_AM_OUTSIDE" ]] && echo "Error: outside output check failed: ${{ steps.set_outside.outputs.value }}" && RVAL=1
        [[ "${{ steps.set_inside.outputs.value }}" != "I_AM_INSIDE" ]] && echo "Error: inside output check failed: ${{ steps.set_inside.outputs.value }}" && RVAL=1
        exit $RVAL